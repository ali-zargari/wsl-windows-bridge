#!/bin/bash

# Wrapper creation library for WSL-Windows Bridge

# Create a wrapper script for a Windows binary
create_wrapper() {
    local name="$1"
    local win_path="$2"
    local wrapper_path="$BIN_DIR/$name"
    
    # Create backup if wrapper exists
    if [ -f "$wrapper_path" ]; then
        cp "$wrapper_path" "$wrapper_path.bak"
    fi
    
    # Create the wrapper script
    cat > "$wrapper_path" << EOF
#!/bin/bash
# WSL-Windows Bridge wrapper for $name
# Auto-generated by wsl-win-bridge
# Windows binary: $win_path

# Handle special cases for path arguments
args=()
for arg in "\$@"; do
    # Convert WSL paths to Windows paths for arguments that look like file paths
    if [[ "\$arg" =~ ^/ ]] && [ -e "\$arg" ]; then
        # This is likely a WSL path, convert it
        arg=\$(wslpath -w "\$arg" 2>/dev/null || echo "\$arg")
    fi
    args+=("\$arg")
done

# Execute the Windows binary with processed arguments
exec "$win_path" "\${args[@]}"
EOF
    
    # Make wrapper executable
    chmod +x "$wrapper_path"
    
    # Ensure bin directory is in PATH
    if [[ ":$PATH:" != *":$BIN_DIR:"* ]]; then
        echo "export PATH=\"\$HOME/bin:\$PATH\"" >> ~/.bashrc
        export PATH="$HOME/bin:$PATH"
    fi
    
    # Store wrapper info
    echo "$name:$win_path:$(date +%s)" >> "$WRAPPERS_DIR/registry"
}

# Create a simple wrapper (no path conversion)
create_simple_wrapper() {
    local name="$1"
    local win_path="$2"
    local wrapper_path="$BIN_DIR/$name"
    
    cat > "$wrapper_path" << EOF
#!/bin/bash
# WSL-Windows Bridge simple wrapper for $name
# Auto-generated by wsl-win-bridge
exec "$win_path" "\$@"
EOF
    
    chmod +x "$wrapper_path"
}

# Validate wrapper works
validate_wrapper() {
    local name="$1"
    local wrapper_path="$BIN_DIR/$name"
    
    if [ ! -f "$wrapper_path" ]; then
        return 1
    fi
    
    # Try to execute with no args (should at least not crash)
    if $wrapper_path </dev/null >/dev/null 2>&1; then
        return 0
    fi
    
    # Some binaries need arguments, that's okay
    return 0
}